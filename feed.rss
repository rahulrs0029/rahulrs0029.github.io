<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Rahul Sharma</title><description>iOS Developer</description><link>https://rahulrs0029.github.io</link><language>en</language><lastBuildDate>Wed, 4 Mar 2020 18:11:45 +0530</lastBuildDate><pubDate>Wed, 4 Mar 2020 18:11:45 +0530</pubDate><ttl>250</ttl><atom:link href="https://rahulrs0029.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://rahulrs0029.github.io/posts/first-post</guid><title>Introduction</title><description>Introduction to my new website which is built using Publish by John Sundell</description><link>https://rahulrs0029.github.io/posts/first-post</link><pubDate>Wed, 4 Mar 2020 16:53:00 +0530</pubDate><content:encoded><![CDATA[<h1>Introduction</h1><p>This website is a static website built using <a href="https://github.com/JohnSundell/Publish">Publish</a>.</p><pre><code><span class="keyword">var</span> message = <span class="string">"Hello World!"</span>
<span class="call">print</span>(message)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://rahulrs0029.github.io/posts/creating-a-toggle-in-swiftui</guid><title>Creating a custom Toggle in SwiftUI</title><description>In this tutorial, we will create a custom Toggle in SwiftUI. This Toggle will work with tap or drag gesture and will have an animation too!</description><link>https://rahulrs0029.github.io/posts/creating-a-toggle-in-swiftui</link><pubDate>Fri, 23 Aug 2019 00:00:00 +0530</pubDate><content:encoded><![CDATA[<h1>Creating a custom Toggle in SwiftUI</h1><p>SwiftUI is Appleâ€™s new powerful framework to build applications across all Apple platforms. It is fast, simple, and easy to learn.</p><p>It has automatic support for Dark Mode, Dynamic Type, localization, and accessibility.</p><h2>What we are going to make</h2><p>We will make this Toggle which when tapped or dragged, changes its state and background color.</p><img src="https://raw.githubusercontent.com/rahulrs0029/rahulrs0029/master/_posts/images/2019-08-23/what-we-are-going-to-make.gif "What we are going to make"" alt="What we are going to make"/><h2>Getting started</h2><p>Open up Xcode 11 and create a New Xcode Project.</p><p>Choose Single View Application under iOS.</p><p>Enter whatever you like in the Product Name, and make sure to choose <code>SwiftUI</code> in user interface.</p><img src="https://raw.githubusercontent.com/rahulrs0029/rahulrs0029/master/_posts/images/2019-08-23/create-new-xcode-project.png "Create new Xcode Project"" alt="Create new Xcode Project"/><p>Click Next. Save it on anywhere you like and click Create.</p><h2>Creating a static Toggle</h2><p>Open <code>ContentView.swift</code>. This is the initial view of the app. Make sure the <code>Canvas</code> is visible on the right-hand side.</p><p>Our Toggle needs a background with a color, and a circle.</p><p>First, we will add a <code>VStack</code>. Inside this <code>VStack</code>, add a <code>Spacer()</code>, a <code>Circle()</code> and then a <code>Spacer()</code> again.</p><p><code>Circle()</code> will be of size <code>160x160</code>, and will have a <code>fill</code> color of White.</p><p><code>VStack</code> will be of size <code>160x330</code>, with <code>cornerRadius</code> of <code>90.0</code>, <code>padding</code> of <code>16.0</code>, and <code>background</code> color of red (initially).</p><blockquote><p>You must add padding line before background color.</p></blockquote><p>Your code will look like this:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Spacer</span>()
            <span class="type">Circle</span>()
                .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">white</span>)
                .<span class="call">frame</span>(width: <span class="number">160</span>, height: <span class="number">160</span>)
            <span class="type">Spacer</span>()
        }
        .<span class="call">frame</span>(width: <span class="number">160</span>, height: <span class="number">330</span>)
        .<span class="call">padding</span>(<span class="number">16.0</span>)
        .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">red</span>)
        .<span class="call">cornerRadius</span>(<span class="number">90.0</span>)
    }
}
</code></pre><p>Build and run. The knob will currently be at the middle of Toggle. It will be fixed later on.</p><h2>Moving toggle knob with tap</h2><p>In <code>ContentView</code> struct, add a <code>@State</code> variable called <code>isOn</code> and initally set it to <code>false</code>.</p><blockquote><p>When the value of State variable changes, the view invalidates its appearance and recomputes the body.</p></blockquote><blockquote><p>Read more about <code>State</code> on <a href="https://developer.apple.com/documentation/swiftui/state">Apple Developer Documentation</a></p></blockquote><p>If <code>isOn</code> is set to true, the knob will be at the top of Toggle i.e. it will be on. And vice-versa.</p><p>So, we will change the code inside <code>VStack</code> to:</p><pre><code><span class="keyword">if</span> !isOn {
    <span class="type">Spacer</span>()
}
<span class="type">Circle</span>()
    .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">white</span>)
    .<span class="call">frame</span>(width: <span class="number">160</span>, height: <span class="number">160</span>)
<span class="keyword">if</span> isOn {
    <span class="type">Spacer</span>()
}
</code></pre><p>This will move the circle knob according to <code>isOn</code> variable value.</p><p>Now, add a tap gesture on <code>Circle</code> using <code>onTapGesture</code>.</p><pre><code>.<span class="call">onTapGesture</span> {
    <span class="keyword">self</span>.<span class="property">isOn</span>.<span class="call">toggle</span>()
}
</code></pre><p>Final code in <code>VStack</code> will look like:</p><pre><code><span class="keyword">if</span> !isOn {
    <span class="type">Spacer</span>()
}
<span class="type">Circle</span>()
    .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">white</span>)
    .<span class="call">frame</span>(width: <span class="number">160</span>, height: <span class="number">160</span>)
    .<span class="call">onTapGesture</span> {
        <span class="keyword">self</span>.<span class="property">isOn</span>.<span class="call">toggle</span>()
    }
<span class="keyword">if</span> isOn {
   <span class="type">Spacer</span>()
}
</code></pre><p>Build and run, tap on the knob and it moves moves up and down accordingly.</p><p>Now, let's change the <code>background</code> color to green when toggle <code>isOn</code>.</p><p>Replace <code>.background(Color.red)</code> with <code>.background(isOn ? Color.green : Color.red)</code></p><p>Build and run, the Toggle is now green when on, and red when off.</p><h2>Toggle with gesture</h2><p>Now we will add <code>DragGesture()</code> to the <code>Circle()</code> using <code>.gesture()</code>.</p><p><code>DragGesture()</code> as <code>.onEnded</code> which gets fired when drag ends.</p><p><code>.onEnded</code> closure has <code>DragGesture.Value</code> which has a <code>translation</code> property. We will use it to determine if user dragged up or down, because toggle will turn on when dragged up and turn off when dragged down.</p><p>Add these line of code at the end of <code>Cirlce()</code>.</p><pre><code>.<span class="call">gesture</span>(
    <span class="type">DragGesture</span>()
        .<span class="call">onEnded</span> { value <span class="keyword">in
            if</span> value.<span class="property">translation</span>.<span class="property">width</span> &lt; <span class="number">0</span> {
                <span class="keyword">self</span>.<span class="property">isOn</span> = <span class="keyword">true</span>
            } <span class="keyword">else</span> {
                <span class="keyword">self</span>.<span class="property">isOn</span> = <span class="keyword">false</span>
            }
        }
)
</code></pre><p>When <code>value.translation.width</code> is negative, user dragged up. And vice-versa.</p><p>Build and run, the knob now moves with when user drags.</p><h2>Adding animation</h2><p>Adding animation is super super easy.</p><p>Add this property to the <code>VStack</code></p><pre><code>.<span class="call">animation</span>(.<span class="dotAccess">easeInOut</span>)	
</code></pre><p>Final code looks like:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    
    <span class="keyword">@State var</span> isOn: <span class="type">Bool</span> = <span class="keyword">false
    
    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="keyword">if</span> !isOn {
                <span class="type">Spacer</span>()
            }
            <span class="type">Circle</span>()
                .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">white</span>)
                .<span class="call">frame</span>(width: <span class="number">160</span>, height: <span class="number">160</span>)
                .<span class="call">animation</span>(.<span class="call">spring</span>())
                .<span class="call">gesture</span>(
                    <span class="type">DragGesture</span>()
                        .<span class="call">onEnded</span> { value <span class="keyword">in
                            if</span> value.<span class="property">translation</span>.<span class="property">width</span> &lt; <span class="number">0</span> {
                                <span class="keyword">self</span>.<span class="property">isOn</span> = <span class="keyword">true</span>
                            } <span class="keyword">else</span> {
                                <span class="keyword">self</span>.<span class="property">isOn</span> = <span class="keyword">false</span>
                            }
                        }
                )
                .<span class="call">onTapGesture</span> {
                    <span class="keyword">self</span>.<span class="property">isOn</span>.<span class="call">toggle</span>()
            	}
            <span class="keyword">if</span> isOn {
                <span class="type">Spacer</span>()
            }
        }
        .<span class="call">frame</span>(width: <span class="number">160</span>, height: <span class="number">330</span>)
        .<span class="call">padding</span>(<span class="number">16.0</span>)
        .<span class="call">background</span>(isOn ? <span class="type">Color</span>.<span class="property">green</span> : <span class="type">Color</span>.<span class="property">red</span>)
        .<span class="call">animation</span>(.<span class="dotAccess">easeInOut</span>)
        .<span class="call">cornerRadius</span>(<span class="number">90.0</span>)
    }

}
</code></pre><p>The knob now moves with ease in-out animation.</p><p>Finished source is available on my GitHub <a href="https://github.com/rahulrs0029/Toggle">repository</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://rahulrs0029.github.io/posts/creating-a-progressbar-in-swiftui</guid><title>Creating a Progress Bar in SwiftUI</title><description>In this tutorial, we will create a Progress Bar in SwiftUI. This Progress Bar will be built from scratch and will not use UIKit.</description><link>https://rahulrs0029.github.io/posts/creating-a-progressbar-in-swiftui</link><pubDate>Sun, 21 Jul 2019 00:00:00 +0530</pubDate><content:encoded><![CDATA[<h1>Creating a Progress Bar in SwiftUI</h1><p>SwiftUI is Appleâ€™s new powerful framework to build applications across all Apple platforms. It is fast, simple, and easy to learn.</p><p>It has automatic support for Dark Mode, Dynamic Type, localization, and accessibility.</p><h2>What we are going to make</h2><p>We will build this ProgressBar whose progress can be changed by using the Button. It will also have a beautiful animation.</p><img src="https://rscodesios.files.wordpress.com/2019/07/ezgif.com-video-to-gif.gif?w=200&zoom=2"/><h2>Getting Started</h2><p>Open up Xcode 11 and create a New Xcode Project.</p><p>Choose Single View Application under iOS.</p><p>Enter whatever you like in the Product Name, and make sure to choose <code>SwiftUI</code> in user interface.</p><img src="https://rscodesios.files.wordpress.com/2019/07/screen-shot-2019-07-23-at-9.13.00-am.png?w=680&h=444"/><p>Click Next. Save it anywhere and click create.</p><h2>Creating a static Progress Bar</h2><p>SwiftUI apps donâ€™t have Main.storyboard file. All UI you will make will be done programmatically.</p><p>Open up <code>ContentView.swift</code> file. This is the initial view of the app. Make sure the Canvas is shown on the right side.</p><p>Now, create a new SwiftUI file and name it <code>ProgressBar</code>. Replace <code>Text()</code> with a <code>ZStack</code>.</p><blockquote><p>SwiftUI has 3 types of stacks. <code>VStack</code> (which stacks the views vertically), <code>HStack</code> (which stacks the views horizontally), and <code>ZStack</code> (which stacks the views on top of each other).</p></blockquote><blockquote><p>If you add 2 circles, one with radius 200, and other with radius 100, in a <code>ZStack</code>, they will look like 2 concentric circles as theyâ€™re added on top of each other rather then added next to each other.</p></blockquote><p>Inside this <code>ZStack</code>, add 2 <code>Rectangle()</code>. One for the progress, and one for the track.</p><p>Give the track rectangle the color of gray and opacity of 30%, and the progress rectangle a blue color.</p><p>Also, give both the rectangles a fixed frame for now and a corner radius of 4.0 to the <code>ZStack</code>.</p><pre><code><span class="type">ZStack</span> {
    <span class="type">Rectangle</span>()
		.<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">gray</span>)
		.<span class="call">opacity</span>(<span class="number">0.3</span>)
		.<span class="call">frame</span>(width: <span class="number">345.0</span>, height: <span class="number">8.0</span>)
	<span class="type">Rectangle</span>()
		.<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">blue</span>)
		.<span class="call">frame</span>(width: <span class="number">200.0</span>, height: <span class="number">8.0</span>)
}
.<span class="call">cornerRadius</span>(<span class="number">4.0</span>)
</code></pre><p><code>ProgressBar</code> would look weird right now. This is because the alignment of <code>ZStack</code> is set to center by default.</p><p>Change alignment of <code>ZStack</code> to leading as:</p><pre><code><span class="type">ZStack</span>(alignment: .<span class="dotAccess">leading</span>) {
</code></pre><p>Now it should look more like a progress bar.</p><h2>Changing progress of Progress Bar</h2><p>Open ProgressBar.swift and add a <code>@Binding</code> property called progress of type <code>CGFloat</code>.</p><blockquote><p>Binding is used to create a two-way connection between a view and its underlying model. Read more on <a href="https://developer.apple.com/documentation/swiftui/binding">Apple Developer Documentation</a></p></blockquote><pre><code><span class="keyword">@Binding var</span> progress: <span class="type">CGFloat</span>
</code></pre><p>And change the frame of second rectangle according to progress like:</p><pre><code><span class="type">Rectangle</span>()
	.<span class="call">frame</span>(width: <span class="number">345.0</span> * (progress / <span class="number">100.0</span>), height: <span class="number">8.0</span>)
</code></pre><p>Try building and compiler will give you an error</p><pre><code><span class="type">Missing</span> arguement <span class="keyword">for</span> parameter 'progress' <span class="keyword">in</span> call.
<span class="type">Insert</span> 'progress: &lt;#Binding&lt;<span class="type">CGFLoat</span>&gt;#&gt;'
</code></pre><p>This is because we havenâ€™t provided progress value for the Live Preview.</p><p>Change it to:</p><pre><code><span class="type">ProgressBar</span>(progress: .<span class="call">constant</span>(<span class="number">25.0</span>))
</code></pre><blockquote><p>You can create a constant Binding values using .constant(value) Try changing the value of progress to something else. ProgressBar will fill accordingly.</p></blockquote><p>Now go back to <code>ContentView.swift</code>. Create a <code>@State</code> variable called <code>progress</code> of type <code>CGFloat</code>.</p><blockquote><p>When the value of State variable changes, the view invalidates its appearance and recomputes the body. Read more on <a href="https://developer.apple.com/documentation/swiftui/state">Apple Developer Documentation</a></p></blockquote><pre><code><span class="keyword">@State var</span> progress: <span class="type">CGFloat</span> = <span class="number">0.0</span>
</code></pre><p>Next, add a <code>VStack</code> in the body of <code>ContentView</code>. This <code>VStack</code> will contain the <code>ProgressBar</code> we just created, and a button which will randomly set the progress when tapped.</p><pre><code><span class="type">VStack</span> {
	<span class="type">ProgressBar</span>(progress: $progress)
	<span class="type">Button</span>(
		action: {
			<span class="keyword">self</span>.<span class="property">progress</span> = <span class="type">CGFloat</span>.<span class="call">random</span>(in: <span class="number">0</span>...<span class="number">100</span>)
		}
	) {
		<span class="type">Text</span>(<span class="string">"Random Progress"</span>)
	}
}
</code></pre><p>Now run the app and it should give you a random progress when button is tapped.</p><h2>Adding animation when progress is changed</h2><p>In <code>ProgressBar.swift</code> file, add a <code>@State</code> variable called <code>isShown</code> of type <code>Bool</code>, and set to <code>false</code> initially.</p><p>Add <code></code>.onAppear { }<code></code> at the end of <code>ZStack</code>. This will be called as soon as the <code>ZStack</code> is appeared. In <code></code>.onAppear { }<code></code> set the value of <code>isShown</code> to <code>true</code>.</p><pre><code><span class="keyword">struct</span> ProgressBar: <span class="type">View</span> {
    <span class="keyword">@Binding var</span> progress: <span class="type">CGFloat</span>
    <span class="keyword">@State var</span> isShowing = <span class="keyword">false
    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span>(alignment: .<span class="dotAccess">leading</span>) {
            <span class="type">Rectangle</span>()
                .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">gray</span>)
                .<span class="call">opacity</span>(<span class="number">0.3</span>)
                .<span class="call">frame</span>(width: <span class="number">345.0</span>, height: <span class="number">8.0</span>)
            <span class="type">Rectangle</span>()
                .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">blue</span>)
                .<span class="call">frame</span>(width: <span class="number">345.0</span> * (<span class="keyword">self</span>.<span class="property">progress</span> / <span class="number">100.0</span>), height: <span class="number">8.0</span>)
        }
        .<span class="call">onAppear</span> {
            <span class="keyword">self</span>.<span class="property">isShowing</span> = <span class="keyword">true</span>
        }
        .<span class="call">cornerRadius</span>(<span class="number">4.0</span>)
    }
}
</code></pre><p>Next, change the <code>frame</code> of progress bar to be like:</p><pre><code>.<span class="call">frame</span>(width: <span class="keyword">self</span>.<span class="property">isShown</span> ? <span class="number">345.0</span> * (progress / <span class="number">100.0</span>) : <span class="number">0</span>, height: <span class="number">8.0</span>)
</code></pre><p>It will give the blue progress bar rectangle a <code>width</code> of 0 initially, but as soon as the <code>ZStack</code> appears, it will change its width to the progress provided.</p><p>Now adding animation is super easy.</p><p>Add this code below the frame line of blue rectangle.</p><pre><code>.<span class="call">animation</span>(.<span class="call">linear</span>(duration: <span class="number">0.6</span>))
</code></pre><p>This adds a linear animation of duration 0.6 seconds to the rectangle. You can also choose ease-in or ease-out instead of linear.</p><blockquote><p>Try playing with the animation duration and animation type.</p></blockquote><p>Your code should now look like this:</p><pre><code><span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> ProgressBar: <span class="type">View</span> {

    <span class="keyword">@State var</span> isShowing = <span class="keyword">false
    @Binding var</span> progress: <span class="type">CGFloat</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span>(alignment: .<span class="dotAccess">leading</span>) {
            <span class="type">Rectangle</span>()
                .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">gray</span>)
                .<span class="call">opacity</span>(<span class="number">0.3</span>)
                .<span class="call">frame</span>(width: <span class="number">345.0</span>, height: <span class="number">8.0</span>)
            <span class="type">Rectangle</span>()
                .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">blue</span>)
                .<span class="call">frame</span>(width: <span class="keyword">self</span>.<span class="property">isShowing</span> ? <span class="number">345.0</span> * (<span class="keyword">self</span>.<span class="property">progress</span> / <span class="number">100.0</span>) : <span class="number">0.0</span>, height: <span class="number">8.0</span>)
                .<span class="call">animation</span>(.<span class="call">linear</span>(duration: <span class="number">0.6</span>))
        }
        .<span class="call">onAppear</span> {
            <span class="keyword">self</span>.<span class="property">isShowing</span> = <span class="keyword">true</span>
        }
        .<span class="call">cornerRadius</span>(<span class="number">4.0</span>)
    }
}

<span class="preprocessing">#if DEBUG</span>
<span class="keyword">struct</span> ProgressBar_Previews: <span class="type">PreviewProvider</span> {
    <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ProgressBar</span>(progress: .<span class="call">constant</span>(<span class="number">25.0</span>))
    }
}
<span class="preprocessing">#endif</span>
</code></pre><p>Finally, run the app in Live Preview of <code>ContentView.swift</code>, and press the button. Now the progress should animate beautifully to random value when the button is tapped.</p><h2>Adding GeometryReader</h2><p>Hereâ€™s a little challenge for you ðŸ˜‰</p><p>Try changing the progress bar frame to be dynamic rather than fixed. So that when you use change the frame of <code>ProgressView()</code> in <code>ContentView.swift</code>, its size should change according to set value rather than always being of size 345 (width) by 8 (height).</p><blockquote><p>Hints: 1. Youâ€™ll need to use GeometryReader. 2. You can get width using geometry.size.width</p></blockquote><p>Finished source is available on my GitHub <a href="https://github.com/rahulrs0029/ProgressBar">repository</a>.</p>]]></content:encoded></item></channel></rss>